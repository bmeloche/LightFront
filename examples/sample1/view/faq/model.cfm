<h2>How do you call the model from LightFront?</h2>
<p>LightFront allows you to call the model as you do in any ColdSpring or Lightwire based application, but you can also take advantage of a couple of key functions.</p>
<p>Initially, LightFront didn't deal with the model at all, but in 0.3.6, we added functionality to call services and other components:</p>
<ul>
	<li><strong>initService()</strong> - Use this function in your controllers to initialize services. If the service has not been instantiated, it instantiates it. There is an optional true/false parameter to load the service into the application scope. The default value is set to yes. You use this like you would call ColdSpring. e.g. &lt;cfset variables.userService = initService("user")&gt;. You would then call the service later in a function: e.g. &lt;cfset foo = variables.userService.read(arguments.args.id)&gt;.</li>
	<li><strong>initComponent()</strong> - Use this function like you use initService, but you'd typically use this function inside services to call DAOs, gateways and other objects but please... please don't fall into the 5 for 1 CFCs per object anti-pattern. Brian Meloche, the LightFront author, recently spoke about this tendency at <a href="http://www.cfobjective.com/">CFObjective</a>, and will be presenting it to the <a href="http://coldfusionmeetup.com/">ColdFusion Meetup</a> soon. That said, if you want to use initComponent, set it in the application scope, so that you may call the component in the service without needing to extend LightFront, such as: In onApplicationStart(): application.lfront.initComponent = initComponent; and, in your service: variables.userDAO = initComponent("model.user.userDAO").</li>
</ul>